import React, { useEffect, useRef, useState } from 'react'
import QuestionNode from './QuestionNode';
import TemplateNode from './TemplateNode';
import MessageNode from './MessageNode';


function CustomNode({ data }) {
    const { label, subType, id, content, setNodes, setEditNode } = data;
    const [nodeTooltip, setNodeTooltip] = useState(false);

    console.log(data);



    const nodeRef = useRef(null);

    const handleClickOutside = (event) => {

        if (nodeRef.current && !nodeRef.current.contains(event.target)) {
            setNodeTooltip(false);
        }
    };

    useEffect(() => {
        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, []);


    const handleNodeTooltip = (id, subType) => {
        setNodeTooltip(!nodeTooltip);
    }

    const handleDeleteNode = (id) => {
        setNodes((nodes) => nodes.filter((node) => node.id !== id));
        setNodeTooltip(false);
    }


    const handleEditNode = (id) => {
        setNodes((nodes) => {
            const node = nodes.find((n) => n.id === id);
            console.log("Node found:", node);
            setEditNode(node || null);
            return nodes;
        });

    };






    return (
        <>

            <div className={`rounded-lg shadow-xl  w-[320px] relative  hover:shadow-2xl `}>

                {nodeTooltip && (
                    <>
                        <div ref={nodeRef} className='p-2 cursor-default bg-white rounded-md shadow-2xl absolute top-[-100px] right-0 w-[120px]'>

                            <ul className='flex flex-col gap-2 text-sm font-semibold'>
                                <li className=' cursor-pointer items hover:text-green-600 flex gap-2 py-2 border-b-1 border-gray-200' onClick={() => handleEditNode(id)}> <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M14.3753 9.16041C12.6078 9.74959 10.2511 7.39287 10.8402 5.62533M11.5664 4.89913L7.75841 8.70716C6.10291 10.3627 4.92846 12.437 4.36063 14.7083L4.17663 15.4443C4.11929 15.6736 4.32702 15.8814 4.55635 15.824L5.29236 15.64C7.56369 15.0722 9.638 13.8977 11.2935 12.2422L15.1015 8.43421C15.5703 7.96543 15.8337 7.32963 15.8337 6.66667C15.8337 5.28614 14.7145 4.16699 13.334 4.16699C12.671 4.16699 12.0352 4.43035 11.5664 4.89913Z" className='stroke' stroke="#333" stroke-width="1.25"></path></svg>Edit</li>


                                <li className=' cursor-pointer items hover:text-green-600 flex gap-2 py-2 ' onClick={() => { handleDeleteNode(id) }}> <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M2.5 5.2355C2.15482 5.2355 1.875 5.51532 1.875 5.8605C1.875 6.20567 2.15482 6.4855 2.5 6.4855V5.2355ZM17.5 6.4855C17.8452 6.4855 18.125 6.20567 18.125 5.8605C18.125 5.51532 17.8452 5.2355 17.5 5.2355V6.4855ZM4.16667 5.8605V5.2355H3.54167V5.8605H4.16667ZM15.8333 5.8605H16.4583V5.2355H15.8333V5.8605ZM15.2849 14.0253L15.8853 14.1986L15.2849 14.0253ZM11.4366 17.3795L11.5408 17.9957L11.4366 17.3795ZM8.56334 17.3795L8.66748 16.7632L8.66748 16.7632L8.56334 17.3795ZM8.43189 17.3572L8.32775 17.9735H8.32775L8.43189 17.3572ZM4.71512 14.0252L4.11464 14.1986L4.71512 14.0252ZM11.5681 17.3572L11.464 16.741L11.5681 17.3572ZM6.53545 4.57449L7.10278 4.83672L6.53545 4.57449ZM7.34835 3.48427L6.93124 3.01881V3.01881L7.34835 3.48427ZM8.56494 2.7558L8.78243 3.34174L8.56494 2.7558ZM11.4351 2.7558L11.6526 2.16987V2.16987L11.4351 2.7558ZM13.4645 4.57449L14.0319 4.31226L13.4645 4.57449ZM2.5 6.4855H17.5V5.2355H2.5V6.4855ZM11.464 16.741L11.3325 16.7632L11.5408 17.9957L11.6722 17.9735L11.464 16.741ZM8.66748 16.7632L8.53603 16.741L8.32775 17.9735L8.4592 17.9957L8.66748 16.7632ZM15.2083 5.8605V10.1465H16.4583V5.8605H15.2083ZM4.79167 10.1465V5.8605H3.54167V10.1465H4.79167ZM15.2083 10.1465C15.2083 11.4005 15.0319 12.648 14.6844 13.8519L15.8853 14.1986C16.2654 12.882 16.4583 11.5177 16.4583 10.1465H15.2083ZM11.3325 16.7632C10.4503 16.9123 9.54967 16.9123 8.66748 16.7632L8.4592 17.9957C9.47927 18.1681 10.5207 18.1681 11.5408 17.9957L11.3325 16.7632ZM8.53603 16.741C7.00436 16.4821 5.75131 15.3612 5.3156 13.8519L4.11464 14.1986C4.68231 16.1651 6.31805 17.6339 8.32775 17.9735L8.53603 16.741ZM5.3156 13.8519C4.96808 12.648 4.79167 11.4005 4.79167 10.1465H3.54167C3.54167 11.5177 3.73457 12.8819 4.11464 14.1986L5.3156 13.8519ZM11.6722 17.9735C13.6819 17.6339 15.3177 16.1651 15.8853 14.1986L14.6844 13.8519C14.2487 15.3612 12.9956 16.4821 11.464 16.741L11.6722 17.9735ZM6.875 5.86049C6.875 5.51139 6.95162 5.16374 7.10278 4.83672L5.96813 4.31226C5.74237 4.80066 5.625 5.32698 5.625 5.86049H6.875ZM7.10278 4.83672C7.25406 4.50944 7.47797 4.20734 7.76546 3.94972L6.93124 3.01881C6.52229 3.38529 6.19376 3.82411 5.96813 4.31226L7.10278 4.83672ZM7.76546 3.94972C8.05308 3.69197 8.39813 3.48439 8.78243 3.34174L8.34744 2.16987C7.8218 2.36498 7.34006 2.65246 6.93124 3.01881L7.76546 3.94972ZM8.78243 3.34174C9.16676 3.19908 9.58067 3.125 10 3.125V1.875C9.43442 1.875 8.87306 1.97476 8.34744 2.16987L8.78243 3.34174ZM10 3.125C10.4193 3.125 10.8332 3.19908 11.2176 3.34174L11.6526 2.16987C11.1269 1.97476 10.5656 1.875 10 1.875V3.125ZM11.2176 3.34174C11.6019 3.48439 11.9469 3.69198 12.2345 3.94972L13.0688 3.01881C12.6599 2.65246 12.1782 2.36498 11.6526 2.16987L11.2176 3.34174ZM12.2345 3.94972C12.522 4.20735 12.7459 4.50944 12.8972 4.83672L14.0319 4.31226C13.8062 3.82411 13.4777 3.38529 13.0688 3.01881L12.2345 3.94972ZM12.8972 4.83672C13.0484 5.16374 13.125 5.51139 13.125 5.8605H14.375C14.375 5.32698 14.2576 4.80066 14.0319 4.31226L12.8972 4.83672ZM4.16667 6.4855H15.8333V5.2355H4.16667V6.4855Z" className='fill' fill="#333333"></path><path d="M8.33203 10V13.3333M11.6654 10V13.3333" className='stroke' stroke="#333333" stroke-width="1.25" stroke-linecap="round"></path></svg> Delete</li>
                            </ul>

                        </div>
                    </>
                )}



                <div className='cursor-all-scroll bg-white rounded-lg'>
                    <div className={`flex  justify-between items-center  mb-2  p-2  rounded-t-lg  text-white ${subType === 'question' ? 'bg-[#F79431]' : ''}  ${subType === 'message' ? 'bg-[#E25866]' : ''}  ${subType === 'template' ? 'bg-[#6C7ED6]' : ''} `}>
                        <div className='flex items-center gap-2'>

                            <span className='bg-gray-50/30 p-1 rounded-full'>
                                {subType == 'question' && (
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 26 26" height="26" width="26">
                                        <path fill="white" d="M3.62234 9.78223C3.12589 11.8987 3.12589 14.1013 3.62234 16.2178C4.33929 19.2742 6.72578 21.6607 9.78222 22.3777C11.8987 22.8741 14.1013 22.8741 16.2178 22.3777C19.2742 21.6607 21.6607 19.2742 22.3777 16.2178C22.8741 14.1013 22.8741 11.8987 22.3777 9.78223C21.6607 6.72578 19.2742 4.33928 16.2178 3.62234C14.1013 3.12589 11.8987 3.12589 9.78223 3.62234C6.72578 4.33928 4.33928 6.72578 3.62234 9.78223ZM13.8296 16.4742C13.8296 16.9038 13.4814 17.252 13.0518 17.252C12.6222 17.252 12.274 16.9038 12.274 16.4742C12.274 16.0447 12.6222 15.6964 13.0518 15.6964C13.4814 15.6964 13.8296 16.0447 13.8296 16.4742ZM11.5481 10.8222C11.5481 10.0204 12.1981 9.37035 13 9.37035C13.8018 9.37035 14.4519 10.0204 14.4519 10.8222V10.9481C14.4519 11.3665 14.2856 11.7678 13.9898 12.0637L12.56 13.4934C12.317 13.7364 12.317 14.1304 12.56 14.3734C12.803 14.6164 13.197 14.6164 13.44 14.3734L14.8697 12.9436C15.399 12.4144 15.6963 11.6965 15.6963 10.9481V10.8222C15.6963 9.33308 14.4891 8.12588 13 8.12588C11.5108 8.12588 10.3036 9.33308 10.3036 10.8222V11.3408C10.3036 11.6844 10.5822 11.963 10.9259 11.963C11.2695 11.963 11.5481 11.6844 11.5481 11.3408V10.8222Z" clip-rule="evenodd" fill-rule="evenodd"></path>
                                    </svg>
                                )}


                                {subType == 'message' && (
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 26 26" height="26" width="26">
                                        <path fill="white" d="M10.0939 3.60187C6.871 4.3305 4.34214 6.80736 3.56626 9.99529C3.142 11.7385 3.14588 13.5727 3.57014 15.3159C4.35814 18.5537 6.67613 21.2483 9.78568 22.5039L9.92122 22.5586C11.2668 23.1019 12.8083 22.4476 13.3605 21.1143C13.5124 20.7474 13.8743 20.504 14.2741 20.504H15.4915C18.8028 20.504 21.6833 18.2541 22.4605 15.0606C22.8465 13.4747 22.8465 11.8205 22.4605 10.2347L22.3586 9.81595C21.6095 6.73788 19.1678 4.34638 16.0559 3.64286L15.6188 3.54403C13.8847 3.15199 12.0839 3.15199 10.3498 3.54403L10.0939 3.60187ZM9.21044 9.06391C8.79359 9.06391 8.45568 9.39918 8.45568 9.81275C8.45568 10.2263 8.79359 10.5616 9.21044 10.5616H16.1291C16.546 10.5616 16.8839 10.2263 16.8839 9.81275C16.8839 9.39918 16.546 9.06391 16.1291 9.06391H9.21044ZM10.4684 12.8081C10.0515 12.8081 9.71362 13.1434 9.71362 13.5569C9.71362 13.9705 10.0515 14.3058 10.4684 14.3058H14.8712C15.288 14.3058 15.6259 13.9705 15.6259 13.5569C15.6259 13.1434 15.288 12.8081 14.8712 12.8081H10.4684Z" clip-rule="evenodd" fill-rule="evenodd"></path>
                                    </svg>
                                )}

                                {subType == 'template' && (
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 26 26" height="26" width="26">
                                        <path fill="white" d="M23.6947 2.6237C23.6947 2.6237 16.2622 6.41609 12.4867 8.1894C13.2955 8.92798 14.0478 9.7246 14.8282 10.4924C10.9897 14.3821 12.9911 12.4319 9.15262 16.3215C9.4341 16.5902 9.71536 16.8587 9.99686 17.1273C13.8353 13.2376 11.834 15.1882 15.6724 11.2986C16.4543 12.0777 17.2318 12.8612 18.0139 13.6401C20.0305 9.66858 23.6947 2.6237 23.6947 2.6237V2.6237Z"></path>
                                        <path stroke-linecap="square" stroke-width="0.994363" stroke="white" fill="white" d="M9.10888 21.6214L3.80789 22.4837L4.67003 17.1824L9.97105 16.3205L9.10888 21.6214Z"></path>
                                    </svg>
                                )}
                            </span>
                            <strong className=" font-semibold capitalize">{label}</strong>

                        </div>
                        <button onClick={() => handleNodeTooltip(id, subType)} className="text-xl cursor-pointer font-semibold mr-2 px-2">
                            ⋮
                        </button>
                    </div>



                    <div className="text-xs p-2 text-gray-600">
                        {subType === 'question' && (
                            <QuestionNode data={data} />
                        )}
                        {subType === 'message' && (
                            <MessageNode data={data} />
                        )}
                        {subType === 'template' && (
                            <TemplateNode data={data} />
                        )}
                    </div>





                </div>


            </div>


        </>
    )
}

export default CustomNode